import sys
from fraction import *

def readFile(filename: str = "input.txt"):
    with open(filename, 'r', encoding="utf-8") as f:
        lines = list(filter(lambda x: x != '' and '#' not in x, list(map(lambda x: x.strip(), f.readlines()))))
    f.close()
    z = list(map(Fraction, map(int, lines[0].split(' '))))
    z = list((i * Fraction(-1))for i in z[:-1]) + z[-1:]
    matrix = list(list(Fraction(int(y)) for y in x.split(' ')) for x in lines[1:])
    # print(z, *matrix, sep='\n')
    return dict(z=z, matrix=matrix)
def printStep(matrix, z, x, step_num, simplex_relation=None, resolution_element=None):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â–∞—è —à–∞–≥ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    :param matrix: –ú–∞—Ç—Ä–∏—Ü–∞
    :param z: Z - —Ñ—É–Ω–∫—Ü–∏—è (—Å–ø–∏—Å–æ–∫)
    :param x: X (—Å–ø–∏—Å–æ–∫)
    :param step_num: –ù–æ–º–µ—Ä —à–∞–≥–∞ (–∏–Ω—Ç)
    :param simplex_relation: –°–∏–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫)
    :param resolution_element: –ò–Ω–¥–µ–∫—Å —Ä–∞–∑—Ä–µ—à–∞—é—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–ª–æ–≤–∞—Ä—å(row, col))
    :return: None
    """

    # –®–∞–ø–∫–∞
    field_width = 10
    print("{:^6}‚îÉ".format("–±.–ø."), end='')
    print("{:^{size}}‚îÉ".format("1", size=field_width), end='')
    for i in range(len(matrix[0]) - 1):
        print("{:^{size}} ".format("x" + str(i + 1), size=field_width), end='')
    print(("\n{:‚îÅ^6}‚ïã{:‚îÅ^{size}}‚ïã{:‚îÅ^" + str(field_width * (len(matrix[0]) - 1) + len(matrix[0]) - 1) + "}").format('', '', '', size=field_width))

    # –°—Ç—Ä–æ–∫–∏

    x_index = list()
    for i in range(len(matrix)):
        tmp_flag = False
        for j in range(len(matrix[0]) - 1):
            if matrix[i][j] == Fraction(1):
                for k in range(len(matrix)):
                    if matrix[k][j] == Fraction(0) or k == i:
                        tmp_flag = True
                    else:
                        tmp_flag = False
                        break
            if tmp_flag:
                x_index.append(j)
                break

    for i in range(len(matrix)):
        print("{:^6}‚îÉ".format("x" + str(x_index[i] + 1)), end='')
        print("{:^{size}}‚îÉ".format(str(matrix[i][-1]), size=field_width), end='')
        for j in range(len(matrix[0]) - 1):
            print("{:^{size}} ".format(str(matrix[i][j]), size=field_width), end='')
        # —Å—Ç—Ä–µ–ª–æ—á–∫–∞
        if resolution_element and i == resolution_element["row"]:
            print("  ü†à", end="")
        print()
    print(("{:‚îÅ^6}‚ïã{:‚îÅ^{size}}‚ïã{:‚îÅ^" + str(field_width * (len(matrix[0]) - 1) + len(matrix[0]) - 1) + "}").format('', '', '', size=field_width))

    # Z
    print("{:^6}‚îÉ".format("Z1"), end='')
    print("{:^{size}}‚îÉ".format(str(z[-1]), size=field_width), end='')
    for i in range(len(z) - 1):
        print("{:^{size}} ".format(str(z[i]), size=field_width), end='')

    # –°–û
    if simplex_relation:
        print(("\n{:‚îÅ^6}‚ïã{:‚îÅ^{size}}‚ïã{:‚îÅ^" + str(field_width * (len(matrix[0]) - 1) + len(matrix[0]) - 1) + "}").format('', '', '', size=field_width))
        print("{:^6}‚îÉ".format("–°–û"), end='')
        print("{:^{size}}‚îÉ".format('', size=field_width), end='')
        for i in range(len(simplex_relation)):
            if simplex_relation[i] != Fraction(sys.maxsize):
                print("{:^{size}} ".format(str(simplex_relation[i]), size=field_width), end='')
            else:
                print("{:^{size}} ".format("‚îÅ", size=field_width), end='')
    print()
    # —Å—Ç—Ä–µ–ª–æ—á–∫–∞ ‚Üë
    if resolution_element:
        print(("{:^6} {:^{size}} {:^" + str(field_width * (resolution_element["col"]) + resolution_element["col"]) + "}{:^{size}}").format('', '', '', "ü†â", size=field_width))
    print()

    # X
    print("X" + str(step_num) + " = " + "(", end='')
    print(*x, sep=', ', end='')
    print(")")

    # Z(X)

    print("Z1(X" + str(step_num) + ") = " + str(z[-1]))